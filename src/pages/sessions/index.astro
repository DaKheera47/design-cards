---
import { buttonVariants } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Session, db } from "astro:db";
import dayjs from "dayjs";
import duration from "dayjs/plugin/duration";
import Layout from "../../layouts/Layout.astro";

export type SessionWithSessionIdentifier = typeof Session & {
  sessionIdentifier: number;
};

// extend dayjs with duration plugin
dayjs.extend(duration);

// get all data
const dbSessions = await db.select().from(Session);

dbSessions.sort((a, b) => {
  // First, sort by 'timeStarted' field using dayjs to compare only dates (ignoring time)
  const dateA = dayjs(a.timeStarted).startOf("day");
  const dateB = dayjs(b.timeStarted).startOf("day");

  if (!dateA.isSame(dateB)) {
    return dateA.isBefore(dateB) ? -1 : 1;
  }

  // If dates are the same, split the device_identifier and sort by session and device
  const aIdentifier = a.device_identifier.split(".");
  const bIdentifier = b.device_identifier.split(".");

  const aSession = parseInt(aIdentifier[0]);
  const aDevice = parseInt(aIdentifier[1]);

  const bSession = parseInt(bIdentifier[0]);
  const bDevice = parseInt(bIdentifier[1]);

  if (aSession === bSession) {
    return aDevice - bDevice;
  }

  return aSession - bSession;
});

// add the sessionIdentifier to the session
const sessions = dbSessions.map((session) => {
  const identifier = session.device_identifier.split(".");
  const sessionIdentifier = parseInt(identifier[0]);

  // @ts-ignore -- TS doesn't like the fact that we're assuming the session exists
  session.sessionIdentifier = sessionIdentifier;

  return session;
});
---

<Layout
  title='Download Session Data'
  dark
>
  <section class='max-h-screen py-8'>
    <h1 class='mb-6 text-balance text-center text-2xl capitalize'>
      See all sessions recorded so far
    </h1>

    <div>
      <button
        type='button'
        id='download'
        class:list={[buttonVariants({ variant: "default" }), "mb-10 w-full"]}
      >
        Download all(!) Data for all sessions
      </button>
    </div>

    <div class='grid grid-cols-3 gap-4'>
      {
        sessions.map((session) => {
          const timeStarted = dayjs(session.timeStarted);
          const sessionEnd = timeStarted.add(
            session.session_duration,
            "milliseconds",
          );
          const sessionDuration = dayjs.duration(
            session.session_duration,
            "milliseconds",
          );
          const humanDuration = sessionDuration.format("m[m] s[s]");

          return (
            <a href={`/sessions/${session.id}`}>
              <Card className='hover:bg-white/10 transition-colors'>
                <CardHeader>
                  <CardTitle>
                    {timeStarted.format("MMMM D")} Session
                    <br />
                    Device {session.device_identifier.split(".")[1]} <br />
                    {session.device_identifier}
                  </CardTitle>
                </CardHeader>

                <CardContent>
                  <p>
                    Session Start:{" "}
                    {timeStarted.format("h:mm:ss A, MMMM D YYYY")}
                  </p>

                  <p>
                    Session End: {sessionEnd.format("h:mm:ss A, MMMM D YYYY")}
                  </p>

                  <p>Session Duration: {humanDuration}</p>

                  <p>
                    Eye Tracking:{" "}
                    {session.isEyeTracked ? "Enabled" : "Disabled"}
                  </p>

                  <p>
                    Browser Info Length:{" "}
                    {Array.isArray(session.browserInfo)
                      ? session.browserInfo.length
                      : "Unknown"}
                  </p>
                </CardContent>
              </Card>
            </a>
          );
        })
      }
    </div>
  </section>
</Layout>

<script>
  const button = document.querySelector("#download");

  async function downloadJson() {
    const response = await fetch("/api/sessions");
    const data = await response.json();

    const blob = new Blob([JSON.stringify(data, null, 2)], {
      type: "application/json",
    });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = "sessions.json";
    a.click();
    URL.revokeObjectURL(url);
  }

  if (button) {
    button.addEventListener("click", downloadJson);
  }
</script>
